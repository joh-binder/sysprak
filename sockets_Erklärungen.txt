/*
Kein Teil des Projekts! Nur zur Erklärung.
(Eine vollständige und auf jeden Fall richtige Erklärung in "Linux-UNIX-Programmierung" Kapitel 11)
*/

#include <sys/types.h>
#include <sys/socket.h>
// definiert close()
#include <unistd.h>
// definiert sockaddr_in
#include <netinet/in.h>
// definiert gethostbyname() /  herror() / hostent
#include <netdb.h>

struct sockaddr_in {
    unsigned short int  sin_family;  /* AF_INET     */
    unsigned short int  sin_port;    /* Portnummer */
    struct in_addr      sin_addr;    /* IP-Adresse  */
};

struct hostent {
    char *  h_name;
    char ** h_aliases;
    short   h_addrtype;
    short   h_length;
    char ** h_addr_list;
 };

int main(int argc, char const *argv[]) {

        // Socket anlegen
        int socket (int family, int type, int protocol);
        /*
        1. Protokollfamilie angeben, die verwendet werden soll
        2. Typ des sockets (SOCK_STREAM o. SOCK_DGRAM)
        3. Zu benutzende Protokoll auswählen (meist 0)
        -> bei Erfolg wird Socket-Deskriptor (positive Ganzzahl) zurückgegeben, sonst -1
        */

        // connect() wird gewöhnlich vom Clientprogramm ausgeführt, um eine Verbindung zum Server herzustellen
        int connect (int sockfd, struct sockaddr *adresse, socklen_t addressen_laenge);
        /*
        1. gibt das Socket an, über das man auf die Verbindung zugreifen will
        2. enthält die Anfangsadresse der Struktur sockaddr, worin sich die IP-Adresse des Rechners und die Portnummer befinden
        3. gibt Speicherbedarf des zweiten Parameters an
        -> bei erfolgreicher Verbindung gibt die Funktion 0 zurück, sonst -1
        */

        // aus Rechnernamen IP-Adresse machen
        struct hostent *gethostbyname(const char *rechnername);
        /*
        -> gibt bei Erfolg einen Zeiger auf struct hostent des Rechners zurück, sonst NULL
        */

        // IP Adressen manipulierren/konvertieren

        int inet_aton(const char *ptr, struct in_addr *inp);
        /*
        aus der punktierten Stringdarstellung ptr wird eine 32-Bit-Adresse konvertiert und in der Struktur gespeichert
        */

        char *inet_ntoa( struct in_addr in );
        /*
        Gegenstück zu inet_aton
        */

        return 0;
}
